[{"type":"tab","id":"7cab27a3.ee14","label":"Flow 1"},{"id":"df294548.8613d8","type":"websocket-listener","z":"","path":"wss://eu1.loriot.io/app?id=BE7A0208&token=mgeO5mjim5n4VCUBtrb2Iw","wholemsg":"false"},{"id":"e3b6051f.950d58","type":"websocket-listener","z":"","path":"/ws/loramote","wholemsg":"false"},{"id":"70930b2c.c1114c","type":"udp in","z":"7cab27a3.ee14","name":"","iface":"","port":"5005","ipv":"udp4","multicast":"false","group":"","datatype":"utf8","x":86.5,"y":192.5,"wires":[["269ac430.8036d4"]]},{"id":"aa5289fa.f75488","type":"debug","z":"7cab27a3.ee14","name":"","active":false,"console":"false","complete":"false","x":675.5,"y":118,"wires":[]},{"id":"269ac430.8036d4","type":"json","z":"7cab27a3.ee14","name":"","x":246.5,"y":193.5,"wires":[["91589d8.473ace"]]},{"id":"91589d8.473ace","type":"function","z":"7cab27a3.ee14","name":"Parse Data","func":"var MaxNorthPosition = 8388607;\nvar MaxSouthPosition = 8388608;\nvar MaxEastPosition = 8388607;\nvar MaxWestPosition = 8388608;\nvar temp;\nvar str_hex = msg.payload.data;\n\nvar bytes = new Buffer(str_hex, 'hex');\n\n// Get LED status - Byte 0\nvar led = bytes.readUInt8(0);\nnode.log(\"LED:\" + led.toString(10));\n\n// Get Temperature - Byte 3, 4\nvar temperature = bytes.readInt16BE(3) / 100;\nnode.log(\"temperature:\" + temperature.toString(10) + \"°C\");\n\n// Get Latitude - Byte 8, 9, 10\ntemp = bytes.readInt32BE(7) & 0x00FFFFFF; // latiture start at offset 8\nif (temp >= 0) // North\n{\n    var latitude = temp * 90 / MaxNorthPosition;\n}\nelse\n{\n    var latitude = temp * 90 / MaxSouthPosition;\n}\nnode.log(\"latitude:\" + latitude.toString(10));\n\n// Get Longitude - Byte 11, 12, 13\ntemp = bytes.readInt32BE(10) & 0x00FFFFFF; // latiture start at offset 11\nif (temp >= 0) // East\n{\n    var longitude = temp * 180 / MaxEastPosition;\n}\nelse\n{\n    var longitude = temp * 180 / MaxWestPosition;\n}\nnode.log(\"longitude:\" + longitude.toString(10));\n\n// Get Altitude - Byte 14, 15\nvar altitude = bytes.readUInt16BE(14)\nnode.log(\"altitude:\" + altitude.toString(10) + \"m\");\n\nvar json_parsed = {\n    \"mote\": msg.payload.mote,\n    \"at\": msg.payload.at,\n    \"fcnt\": msg.payload.fcnt,\n    \"rssi\": msg.payload.rssi,\n    \"snr\": msg.payload.snr,\n    \"datr\": msg.payload.datr,\n    \"led\": led,\n    \"temp\": temperature,\n    \"lat\": latitude,\n    \"lon\": longitude,\n    \"alt\": altitude\n};\n\nvar mote_info_msg = { payload: JSON.stringify(json_parsed) };\n\nreturn [msg, mote_info_msg, mote_info_msg];","outputs":"3","noerr":0,"x":444.5,"y":192.5,"wires":[["aa5289fa.f75488"],["f3922093.c1f9a8"],["1329a965.e3762f"]]},{"id":"1329a965.e3762f","type":"websocket out","z":"7cab27a3.ee14","name":"","server":"e3b6051f.950d58","client":"","x":689.5,"y":232,"wires":[]},{"id":"f3922093.c1f9a8","type":"debug","z":"7cab27a3.ee14","name":"","active":true,"console":"false","complete":"payload","x":677.5,"y":170,"wires":[]},{"id":"ba5026df.11f67","type":"template","z":"7cab27a3.ee14","name":"Web Page","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"<!DOCTYPE HTML>\n<html>\n    <head>\n    <title>LoRa Mote</title>\n    <script src=\"http://maps.googleapis.com/maps/api/js?&libraries=geometry\"></script>\n    \n    <script type=\"text/javascript\">\n        var ws;\n        var wsUri = \"ws:\";\n        var loc = window.location;\n        console.log(loc);\n        if (loc.protocol === \"https:\") { wsUri = \"wss:\"; }\n        // This needs to point to the web socket in the Node-RED flow\n        // ... in this case it's ws/simple\n        wsUri += \"//\" + loc.host + loc.pathname.replace(\"loramote\",\"ws/loramote\");\n        console.log(wsUri);\n        \n        //var distance = 0;\n        //var gwPosEPSI = new google.maps.LatLng(45.187712, 5.778802);\n        var parcoursGPS = [];\n        var map;\n        var marker;\n        // Load the complete map once\n        function LoadMap() {\n            // init on Semtech office\n            var myCenter = new google.maps.LatLng(45.239988, 5.852273);\n            var mapProp = {\n                center:myCenter,\n                zoom:10,\n                mapTypeId:google.maps.MapTypeId.ROADMAP\n            };\n            map = new google.maps.Map(document.getElementById(\"googleMap\"),mapProp);\n            marker=new google.maps.Marker({position:myCenter,map:map});\n        }\n        google.maps.event.addDomListener(window, 'load', LoadMap);\n        \n        // update the marker position\n        function UpdateMap(latitude, longitude) {\n            //Remove previous Marker.\n            if (marker != null) {\n                marker.setMap(null);\n            }\n     \n            //Set Marker on Map.\n            var myLatlng = new google.maps.LatLng(latitude, longitude);\n            marker = new google.maps.Marker({\n                position: myLatlng,\n                map: map,\n                title: \"hello\"\n            });\n            \n            //distance = google.maps.geometry.spherical.computeDistanceBetween(gwPosEPSI, myLatlng);\n            //distance = Math.round(distance);\n            //console.log(distance);\n            \n            parcoursGPS.push(myLatlng);\n            \n            var traceParcoursGPS = new google.maps.Polyline({\n                map: map,\n                path: parcoursGPS,//chemin du tracé\n                strokeColor: \"#FF0000\",//couleur du tracé\n                strokeOpacity: 1.0,//opacité du tracé\n                strokeWeight: 2//grosseur du tracé\n            });\n            //traceParcoursGPS.setMap(map);\n        };\n\n        // Connect to Loriot websocket\n        function wsConnect() {\n            console.log(\"connect\",wsUri);\n            ws = new WebSocket(wsUri);\n            //var line = \"\";    // either uncomment this for a building list of messages\n            ws.onmessage = function(msg) {\n                var line = \"\";  // or uncomment this to overwrite the existing message\n                var temperature_line = \"\";\n                var gps_coord_line = \"\";\n                var alt_line = \"\";\n                var led_line = \"\";\n                var dist_line = \"\";\n                var rssi_line = \"\";\n                var snr_line = \"\";\n                var mote_devaddr = \"\";\n                // parse the incoming message as a JSON object\n                var data = msg.data;\n                //console.log(data);\n                var jsonData = JSON.parse(msg.data);\n                //console.log(jsonData.temperature);\n                // build the output from the topic and payload parts of the object\n                //line += \"<p>\"+data+\"</p>\";\n                line += data;\n                temperature_line += jsonData.temp;\n                gps_coord_line += jsonData.lat + \", \" + jsonData.lon;\n                alt_line += jsonData.alt;\n                if (jsonData.led == 0) {\n                    led_line += \"OFF\";\n                } else {\n                    led_line += \"ON\";\n                }\n                rssi_line += jsonData.rssi;\n                snr_line += jsonData.snr;\n                mote_devaddr += jsonData.mote;\n                // replace the messages div with the new \"line\"\n                document.getElementById('mote_devaddr').innerHTML = mote_devaddr;\n                document.getElementById('messages').innerHTML = line;\n                document.getElementById('rssi').innerHTML = rssi_line;\n                document.getElementById('snr').innerHTML = snr_line;\n                document.getElementById('temperature').innerHTML = temperature_line;\n                document.getElementById('gps_coord').innerHTML = gps_coord_line;\n                document.getElementById('gps_alt').innerHTML = alt_line;\n                document.getElementById('led_status').innerHTML = led_line;\n\n                UpdateMap(jsonData.lat, jsonData.lon);\n                //ws.send(JSON.stringify({data:data}));\n            }\n            ws.onopen = function() {\n                // update the status div with the connection status\n                document.getElementById('status').innerHTML = \"connected\";\n                //ws.send(\"Open for data\");\n                console.log(\"connected\");\n            }\n            ws.onclose = function() {\n                // update the status div with the connection status\n                document.getElementById('status').innerHTML = \"not connected\";\n                // in case of lost connection tries to reconnect every 3 secs\n                setTimeout(wsConnect,3000);\n            }\n        }\n        \n        function doit(m) {\n            if (ws) { ws.send(m); }\n        }\n    </script>\n    \n    <style media=\"screen\" type=\"text/css\">\n        * {\n\t        padding: 0;\n\t        margin: 0;\n        }\n        \n        .info-div {\n        \tcolor: #fff;\n        \tpadding: 10px;\n        \ttext-align: center;\n        \twidth: 100%;\n        }\n        \n        .info-div h2 {\n\t        font: 200 4em/1.5em \"Helvetica Neue\", Arial, Helvetica, Geneva, sans-serif;\n        }\n\n        .info-div p {\n\t        font: 100 1.2em/1.5em \"Helvetica Neue\", Arial, Helvetica, Geneva, sans-serif;\n        }\n        \n        #mote_addr {\n            background: rgba(0, 0, 0, 0.9);\n        }\n\n        #mote_temperature {\n            background: rgba(32, 32, 32, 0.9);\n        }\n\n        #mote_gps {\n            background: rgba(64, 64, 64, 0.9);\n        }\n        \n        #mote_led {\n            background: rgba(96, 96, 96, 0.9);\n        }\n        \n        #signal_strength {\n            background: rgba(128, 128, 128, 0.9);\n        }\n        \n        #mote_msg {\n            background: rgba(150, 150, 150, 0.9);\n        }\n\n        #googleMap {\n            width: 100%;\n            height:480px;\n        }\n    </style>\n    \n    </head>\n    <body onload=\"wsConnect();\" onunload=\"ws.disconnect();\">\n        <font face=\"Arial\">\n            \n        <div id=\"mote_addr\" class=\"info-div\">\n            <h1><span id=\"mote_devaddr\"></span></h1>\n        </div>\n\n        <div id=\"googleMap\"></div>\n        \n        <div id=\"mote_temperature\" class=\"info-div\">\n            <h1><span id=\"temperature\"></span>&#176C</h1>\n        </div>\n        \n        <div id=\"mote_gps\" class=\"info-div\">\n            <h1><span id=\"gps_coord\"></span>, <span id=\"gps_alt\"></span>m</h1>\n        </div>\n        \n        <div id=\"mote_led\" class=\"info-div\">\n            <h1>LED <span id=\"led_status\"></span></h1>\n        </div>\n        \n        <div id=\"signal_strength\" class=\"info-div\">\n            <h1>RSSI <b><span id=\"rssi\"></span></b>dBm | SNR <b><span id=\"snr\"></span></b>dB</h1>\n        </div>\n\n        <div id=\"mote_msg\" class=\"info-div\">\n            <p><span id=\"messages\"></span></p>\n        </div>\n        <!--\n        <br>\n        <button type=\"button\" onclick='doit(\"click\");'>Click to send message</button>\n        <hr/>\n        <div id=\"status\">unknown</div>\n        -->\n        </font>\n    </body>\n</html>\n","x":435,"y":324,"wires":[["186676b7.709629"]]},{"id":"be94556e.979768","type":"http in","z":"7cab27a3.ee14","name":"","url":"/loramote","method":"get","swaggerDoc":"","x":224,"y":325,"wires":[["ba5026df.11f67"]]},{"id":"186676b7.709629","type":"http response","z":"7cab27a3.ee14","name":"","x":615,"y":325.5,"wires":[]},{"id":"ef16712e.80b4c8","type":"inject","z":"7cab27a3.ee14","name":"LED on","topic":"","payload":"{\"cmd\":\"tx\",\"EUI\":\"3439363460337C13\",\"port\":2,\"data\":\"01\"}","payloadType":"json","repeat":"","crontab":"","once":false,"x":307,"y":543,"wires":[["7e8e8819.277828"]]},{"id":"7e8e8819.277828","type":"websocket out","z":"7cab27a3.ee14","name":"Loriot websocket","server":"df294548.8613d8","client":"","x":576,"y":543.5,"wires":[]},{"id":"e38e1556.2e6d1","type":"inject","z":"7cab27a3.ee14","name":"LED off","topic":"","payload":"{\"cmd\":\"tx\",\"EUI\":\"3439363460337C13\",\"port\":2,\"data\":\"00\"}","payloadType":"json","repeat":"","crontab":"","once":false,"x":306,"y":608,"wires":[["5ba370ac.0f205"]]},{"id":"5ba370ac.0f205","type":"websocket out","z":"7cab27a3.ee14","name":"Loriot websocket","server":"df294548.8613d8","client":"","x":574,"y":608.5,"wires":[]},{"id":"8cd9f4da.88f588","type":"file","z":"7cab27a3.ee14","name":"Store data","filename":"C:\\Users\\mcoracin\\Documents\\DATA_Syncplicity\\LoRa\\node-red\\gps_data.txt","appendNewline":true,"createDir":true,"overwriteFile":"false","x":937,"y":415,"wires":[]},{"id":"889daf57.37553","type":"function","z":"7cab27a3.ee14","name":"Fake GPS","func":"var useFake = 0;\n\nvar parcoursGPS_points = [\n    /*\n    { lat: 45.188593, lng: 5.778316 },\n    { lat: 45.187829, lng: 5.779330 },\n    { lat: 45.187383, lng: 5.781181 },\n    { lat: 45.187406, lng: 5.782710 },\n    { lat: 45.188846, lng: 5.785001 },\n    { lat: 45.189394, lng: 5.786659 },\n    { lat: 45.188808, lng: 5.790505 },\n    { lat: 45.186921, lng: 5.792780 },\n    { lat: 45.186040, lng: 5.793048 },\n    { lat: 45.185855, lng: 5.795231 },\n    { lat: 45.185696, lng: 5.797479 },\n    { lat: 45.185639, lng: 5.799024 },\n    { lat: 45.186724, lng: 5.799807 }\n    */\n    /*\n    { lat:45.18131198660278, lng:5.784366820379117 }, { lat:45.18131198660278, lng:5.784366820379117 }, { lat:45.181344173114795, lng:5.786684249244243 }, { lat:45.181848428469706, lng:5.791555141395944 }, { lat:45.181859157307045, lng:5.791555141395944 }, { lat:45.181859157307045, lng:5.7915336837212665 }, { lat:45.1823204973126, lng:5.793894027935747 }, { lat:45.1823204973126, lng:5.793894027935747 }, { lat:45.18295349871558, lng:5.796833729366509 }, { lat:45.18295349871558, lng:5.796833729366509 }, { lat:45.18490614711119, lng:5.800910687555157 }, { lat:45.1856035215382, lng:5.802498555481262 }, { lat:45.18619360759182, lng:5.8042366271301065 }, { lat:45.18619360759182, lng:5.8042366271301065 }, { lat:45.18619360759182, lng:5.8042366271301065 }, { lat:45.19021692159377, lng:5.8128840700249755 }, { lat:45.19021692159377, lng:5.8128840700249755 }, { lat:45.19193353556794, lng:5.8167249937921754 }, { lat:45.19193353556794, lng:5.8167249937921754 }, { lat:45.19193353556794, lng:5.8167249937921754 }, { lat:45.19193353556794, lng:5.8167249937921754 }, { lat:45.19193353556794, lng:5.8167249937921754 }, { lat:45.19193353556794, lng:5.8167249937921754 }, { lat:45.19502344072144, lng:5.825265148313659 }, { lat:45.19573154398579, lng:5.827239254383952 }, { lat:45.19573154398579, lng:5.827239254383952 } \n    */\n    { lat:45.19823136308567, lng:5.780611727310625 }, { lat:45.19641818957545, lng:5.781405661273678 }, { lat:45.1904744136899, lng:5.781920645465928 }, { lat:45.1904744136899, lng:5.781920645465928 }, { lat:45.184584281991036, lng:5.7805902696359475 }\n];\n\n// Initialize static counter to 0 if doesn't exist already\nvar parcoursCount = context.get('parcoursCount')||0;\nnode.log(parcoursCount);\n\nif (useFake === 1) {\n    if (parcoursCount < parcoursGPS_points.length) {\n        var jsonData = JSON.parse(msg.payload);\n        var msg_fake = { payload: \"{\" + \"\\\"tmst\\\":\\\"\" + jsonData.tmst + \"\\\"\" + \",\\\"EUI\\\":\\\"\" + jsonData.EUI + \"\\\"\" + \",\\\"temperature\\\":\" + jsonData.temperature + \",\\\"lat\\\":\" + parcoursGPS_points[parcoursCount].lat + \",\\\"lon\\\":\" + parcoursGPS_points[parcoursCount].lng + \",\\\"alt\\\":\" + jsonData.alt + \",\\\"led\\\":\" + jsonData.led + \",\\\"rssi\\\":\" + jsonData.rssi + \",\\\"snr\\\":\" + jsonData.snr + \"}\" };\n\n        parcoursCount += 1;\n        context.set('parcoursCount', parcoursCount);\n        \n        node.log(msg_fake.payload);\n        return [ msg_fake, msg_fake ];\n    } else {\n        parcoursCount = 0;\n        context.set('parcoursCount', parcoursCount);\n    }\n}\n\nreturn [ msg, msg ];","outputs":"2","noerr":0,"x":936,"y":365.5,"wires":[[],[]]}]